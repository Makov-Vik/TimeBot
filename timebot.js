require('dotenv').config();
const { Telegraf } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);

const Markup = require('telegraf/markup');

let notes = [];

bot.start((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é! ${ctx.message.from.first_name}\n–î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å –Ω–∞–º–∏ —Å–∏–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤`, Markup.keyboard([
  ['/help', '–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
  ['–í—Ä–µ–º—è –¥–æ –∫–∞—Ä–∞–Ω–∏—è –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞'],
]).resize().extra()));

bot.help((ctx) => ctx.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ "–ù–∞–ø–æ–º–Ω–∏" –∏ –Ω—É–∂–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –¥–∞–ª–µ–µ "–≤" –∏ –≤—Ä–µ–º—è. –ù–∞–ø—Ä–∏–º–µ—Ä:\n–ù–∞–ø–æ–º–Ω–∏ 07.02 –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –≤ 14:50\n*07.02 - —ç—Ç–æ –¥–∞—Ç–∞ –∏ –º–µ—Å—è—Ü(–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è) '))

bot.hears('–í—Ä–µ–º—è –¥–æ –∫–∞—Ä–∞–Ω–∏—è –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞', function(ctx) {
  const now = new Date();
  const newyear = new Date(2021, 11, 31, 24, 0, 0);
  let left = newyear - now;
  let days = ~~((left) / (1000 * 60 * 60 * 24));
  left = left - (days * 1000 * 60 * 60 * 24);
  let hours = ~~((left)/ (1000 * 60 * 60));
  left -= hours * 1000 * 60 * 60;
  let min = ~~((left) / (1000 * 60));
  return ctx.replyWithHTML('–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–∞—Ä–∞–Ω–∏—è: ' + `<i>${days} days. ${hours} hours. ${min} min.</i>`)
});

bot.hears('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', (ctx) => {
  if (notes.length !== 0) {
    let result = '';
    notes.map((reminder) => result += (reminder.Number + '. ' + reminder.Event + '  ' +`–≤ <i>${reminder.Time}</i>` + '\n')) ////// —Ç—Å–ø—Ä–∞–≤–∏—Ç—å —Å –≤—ã–≤–æ–¥–æ–º –¥–∞—Ç—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ
    return ctx.replyWithHTML(result + '<i>\n\n–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –°—ç—Ä ?</i> üßê',
      Markup.inlineKeyboard([
        notes.map((i) => Markup.callbackButton(`${i.Number}`, `${i.Number}`))]).extra());
  }
  else ctx.reply("–ü–æ–∫–∞ —á—Ç–æ, –Ω–∏—á–µ–≥–æ –º–Ω–µ –Ω–µ –∑–∞–¥–∞–ª, –ª–µ–Ω—Ç—è–π!")
});

bot.on('text', (ctx) => {
  if ((ctx.message.text.indexOf('–Ω–∞–ø–æ–º–Ω–∏') !== -1) || (ctx.message.text.indexOf('–ù–∞–ø–æ–º–Ω–∏') !== -1)) {
    const lastIndex = ctx.message.text.lastIndexOf('–≤');
    const time = ctx.message.text.slice(lastIndex + 2);
    if (!isNaN(parseInt(ctx.message.text[8], 10))) {
      const indexDot = ctx.message.text.indexOf('.');
      const date = ctx.message.text.slice(indexDot - 2, indexDot + 3).trim();
      const event = ctx.message.text[indexDot + 4].toUpperCase()
+ ctx.message.text.slice(indexDot + 5, lastIndex - 1);
      notes.push({
        Number: notes.length + 1, Event: event, Date: date, Time: time,
      });
    }
    else {
      const event = ctx.message.text[8].toUpperCase() + ctx.message.text.slice(9, lastIndex - 1);
      notes.push({ Number: notes.length + 1, Event: event, Time: time });
    }
    ctx.reply("–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é, –µ—Å–ª–∏ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ–Ω—è –Ω–µ —É–≥—Ä–æ–±–∏—Ç")
  }
  setInterval(function() {
    //	let month = new Date().getMonth() + 1
        //month < 10 ? month = '0' + month : month + ''

        // const nowDate = new Date().getDate() + '.' + (new Date().getMonth() + 1);
        // const nowTime = new Date().getHours() + ':' + new Date().getMinutes();

    const nowDate = new Date().toLocaleString('ru', {day: 'numeric', month: 'numeric'});
    const nowTime = new Date().toLocaleString('ru', {hour: 'numeric', minute: 'numeric'})

        // const nowDate = new Date().toLocaleString('ru', {day: 'numeric', month: 'numeric'});
        // const nowTime = new Date().toLocaleString('ru', {hour: 'numeric', minute: 'numeric'})

        for(let i = 0; i < notes.length; i++){
            if (notes[i].Time === nowTime) {
               if  (notes[i].hasOwnProperty('Date')) {
                   if (notes[i].Date === nowDate) {
                     ctx.replyWithHTML('–í—ã –¥–æ–ª–∂–Ω—ã —Å–µ–π—á–∞—Å ' + ` <i>${notes[i].Date} —á–∏—Å–ª–∞ –≤ ${notes[i].Time}</i> -  ` + notes[i].Event);
                     notes.splice(i, 1);
                    }
                }    
                else  {
                    ctx.replyWithHTML('–í—ã –¥–æ–ª–∂–Ω—ã —Å–µ–π—á–∞—Å ' + `<i>(–≤ ${notes[i].Time}</i>)   ` + notes[i].Event);
                    notes.splice(i, 1);
            }  
        }
    }
  }, 1000);
});

// bot.action(arr, (ctx) => {
// //–Ω–µ–ª—å–∑—è –ø–µ—Ä–≤—ã –ø–∞—Ä–µ–º–∞—Ç—Ä–æ–º —É–∫–∞–∑–∞—Ç—å notes.map((item) => item.Number) –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  
// ctx.reply(notes.map((item) => `${item.Number}`));
//   return ctx.reply('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ?', Markup.inlineKeyboard([
//     Markup.callbackButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', 'change'),
//   ]).extra());
// });

bot.launch();
